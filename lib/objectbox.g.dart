// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/folder_db.dart';
import 'database/todoitem_db.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6084533940662941806),
      name: 'Folderdata',
      lastPropertyId: const obx_int.IdUid(3, 3603822669156433347),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 468100038579461176),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2306641712929148948),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3603822669156433347),
            name: 'fPicture',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'todos', srcEntity: 'TodoItem', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7369632490856512423),
      name: 'TodoItem',
      lastPropertyId: const obx_int.IdUid(4, 7442515178589245756),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9112289830996556711),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7774445457143451693),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8475809113188233351),
            name: 'isComplete',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7442515178589245756),
            name: 'folderId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3630946540848730290),
            relationTarget: 'Folderdata')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 7369632490856512423),
      lastIndexId: const obx_int.IdUid(1, 3630946540848730290),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Folderdata: obx_int.EntityDefinition<Folderdata>(
        model: _entities[0],
        toOneRelations: (Folderdata object) => [],
        toManyRelations: (Folderdata object) => {
              obx_int.RelInfo<TodoItem>.toOneBacklink(
                      4, object.id, (TodoItem srcObject) => srcObject.folder):
                  object.todos
            },
        getId: (Folderdata object) => object.id,
        setId: (Folderdata object, int id) {
          object.id = id;
        },
        objectToFB: (Folderdata object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final fPictureOffset = fbb.writeString(object.fPicture);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, fPictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final fPictureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Folderdata(text: textParam, fPicture: fPictureParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Folderdata>(
              object.todos,
              store,
              obx_int.RelInfo<TodoItem>.toOneBacklink(
                  4, object.id, (TodoItem srcObject) => srcObject.folder));
          return object;
        }),
    TodoItem: obx_int.EntityDefinition<TodoItem>(
        model: _entities[1],
        toOneRelations: (TodoItem object) => [object.folder],
        toManyRelations: (TodoItem object) => {},
        getId: (TodoItem object) => object.id,
        setId: (TodoItem object, int id) {
          object.id = id;
        },
        objectToFB: (TodoItem object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addBool(2, object.isComplete);
          fbb.addInt64(3, object.folder.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isCompleteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = TodoItem(text: textParam, isComplete: isCompleteParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.folder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.folder.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Folderdata] entity fields to define ObjectBox queries.
class Folderdata_ {
  /// See [Folderdata.id].
  static final id =
      obx.QueryIntegerProperty<Folderdata>(_entities[0].properties[0]);

  /// See [Folderdata.text].
  static final text =
      obx.QueryStringProperty<Folderdata>(_entities[0].properties[1]);

  /// See [Folderdata.fPicture].
  static final fPicture =
      obx.QueryStringProperty<Folderdata>(_entities[0].properties[2]);

  /// see [Folderdata.todos]
  static final todos =
      obx.QueryBacklinkToMany<TodoItem, Folderdata>(TodoItem_.folder);
}

/// [TodoItem] entity fields to define ObjectBox queries.
class TodoItem_ {
  /// See [TodoItem.id].
  static final id =
      obx.QueryIntegerProperty<TodoItem>(_entities[1].properties[0]);

  /// See [TodoItem.text].
  static final text =
      obx.QueryStringProperty<TodoItem>(_entities[1].properties[1]);

  /// See [TodoItem.isComplete].
  static final isComplete =
      obx.QueryBooleanProperty<TodoItem>(_entities[1].properties[2]);

  /// See [TodoItem.folder].
  static final folder =
      obx.QueryRelationToOne<TodoItem, Folderdata>(_entities[1].properties[3]);
}
